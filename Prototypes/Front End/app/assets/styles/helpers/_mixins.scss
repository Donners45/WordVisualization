//Vertical Align
@mixin centre($axis: "both"){
	position:absolute;
	@if $axis == "y"{
		top:50%;
		-webkit-transform: translateY(-50%);
		-moz-transform: translateY(-50%);
		-ms-transform: translateY(-50%);
		-o-transform: translateY(-50%);
		transform: translateY(-50%);
	}
	@if $axis == "x"{
		left:50%;
		-webkit-transform: translateX(-50%);
		-moz-transform: translateX(-50%);
		-ms-transform: translateX(-50%);
		-o-transform: translateX(-50%);
		transform: translateX(-50%);
	}
	@if $axis == "both"{
		top:50%;
		left:50%;
		-webkit-transform: translate(-50%, -50%);
		-moz-transform: translate(-50%, -50%);
		-ms-transform: translate(-50%, -50%);
		-o-transform: translate(-50%, -50%);
		transform: translate(-50%, -50%);
	}
}

//Clearfix
@mixin clearfix {
	&:after {
		content: "";
		display: table;
		clear: both;
	}
}

//px to rem convertor
@function parseInt($n) {
	@return $n / ($n * 0 + 1);
}

@mixin rem($property, $values) {
	$px: ();
	$rem: (); 
	
	@each $value in $values { 
	 
		@if $value == 0 or $value == auto {
			$px : append($px , $value);
			$rem: append($rem, $value);
		}
		
		@else { 
			$unit: unit($value); 
			$val: parseInt($value); 
			
			@if $unit == "px" {
				$px : append($px,  $value);
				$rem: append($rem, ($val / 10 + rem));
			}
			
			@if $unit == "rem" {
				$px : append($px,  ($val * 10 + px));
				$rem: append($rem, $value);
			}
		}
	}
	
	@if $px == $rem {
		#{$property}: $px; 
	} @else {
		#{$property}: $px;
		#{$property}: $rem;
	}
}

//Media Query Mixin
@mixin bp($point) {
	@if $point == desktop {
		@media (min-width: 1025px) { @content; }
	}
	@else if $point == tablet {
		@media (min-width: 767px) and (max-width: 1024px) { @content; }
	}
	@else if $point == mobile {
		@media (max-width: 766px)  { @content; }
	}
}

// Add percentage of white to a color
@function tint($color, $percent) {
	@return mix(white, $color, $percent);
}
 
// Add percentage of black to a color
@function shade($color, $percent) {
	@return mix(black, $color, $percent);
}